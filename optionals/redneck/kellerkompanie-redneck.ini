[Default]

Version = 1
;; Used incase there is ever a breaking change, or to inform user in log about a new feature.

Strip Chars = ";[]"
;; List of characters to strip out
Strip Chars Mode = 0
;; 0 = Strip Bad Chars, 1 = Strip + Log Bad Chars, 2 = Return Error & Log Bad Chars
;;     Note: Logging on works when sending data to database.

Input SQF Parser = false
;; Expermential
;;   If enabled will use SQF Array Parser instead of : seperator for values
;;   i.e   0:SQL:UpdatePlayer:["Joe",[1,2,0],0.22333,"PlayerBackpack",-3]
;;   Advantage is that you don't need to strip : seperator from user inputted values


[createTableLocations]
SQL1_1  = CREATE TABLE IF NOT EXISTS redneck_locations (
SQL1_2  = LocationID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
SQL1_3  = PersistencyKey CHAR(32) NOT NULL,
SQL1_4  = LocationVariable CHAR(64) NOT NULL,
SQL1_5  = Side ENUM('BLACKORDER','REDNECK') NOT NULL,
SQL1_6  = UNIQUE (PersistencyKey, LocationVariable))
SQL1_7  = CHARACTER SET 'utf8'
SQL1_8  = COLLATE 'utf8_german2_ci';

Prepared Statement = false






[setLocationSide]
SQL1_1 = REPLACE INTO redneck_locations (PersistencyKey, LocationVariable, Side) VALUES
SQL1_2 = (?, ?, ?);

SQL1_INPUTS = 1,2,3

Prepared Statement = true



[getLocationSide]
SQL1_1 = SELECT Side FROM redneck_locations WHERE PersistencyKey = ? AND LocationVariable = ?;

SQL1_INPUTS = 1,2

OUTPUT = 1-String

Prepared Statement = true


[getLocations]
SQL1_1 = SELECT LocationVariable, Side FROM redneck_locations WHERE PersistencyKey = ?;

SQL1_INPUTS = 1

OUTPUT = 1-String,2-String

Prepared Statement = true
