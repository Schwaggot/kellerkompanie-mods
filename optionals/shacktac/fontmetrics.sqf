// Get an approximate width of a string assuming variable width letters

// This is calibrated with the STHUD Font PuristaSemiBold at 0.035
// 15x W just about fits into 0.3 in 16:10 and 16:9 with UI size Small (ui scale = 0.55)
// Some of these metrics are a bit off at other UI sizes, but it's not a linear amount. :-(
// Uncalibrated characters are treated as being as wide as W.
GVAR(Metrics) =
[
     ["'", 0.27]
    ,["-", 0.34]
    ,["!", 0.27]
    ,["""", 0.4]
    ,["#", 0.85]
    ,["$", 0.67]
    ,["%", 0.80]
    ,["&", 0.67]
    ,["(", 0.34]
    ,[")", 0.40]
    ,["*", 0.48]
    ,[",", 0.27]
    ,[".", 0.27]
    ,["/", 0.48]
    ,[":", 0.27]
    ,[";", 0.27]
    ,["?", 0.67]
    ,["@", 1.10]
    ,["[", 0.34]
    ,["]", 0.40]
    ,["^", 0.53]
    ,["_", 0.67]
    ,["`", 0.27]
    ,["{", 0.40]
    ,["|", 0.27]
    ,["}", 0.48]
    ,["~", 0.53]
    ,["+", 0.60]
    ,["<", 0.60]
    ,["=", 0.60]
    ,[">", 0.60]
    ,["0", 0.67]
    ,["1", 0.40]
    ,["2", 0.60]
    ,["3", 0.60]
    ,["4", 0.67]
    ,["5", 0.60]
    ,["6", 0.60]
    ,["7", 0.67]
    ,["8", 0.67]
    ,["9", 0.60]
    ,["a", 0.60]
    ,["b", 0.60]
    ,["c", 0.60]
    ,["d", 0.60]
    ,["e", 0.60]
    ,["f", 0.54]
    ,["g", 0.60]
    ,["h", 0.60]
    ,["i", 0.27]
    ,["j", 0.27]
    ,["k", 0.60]
    ,["l", 0.27]
    ,["m", 0.85]
    ,["n", 0.60]
    ,["o", 0.60]
    ,["p", 0.60]
    ,["q", 0.60]
    ,["r", 0.50]
    ,["s", 0.54]
    ,["t", 0.54]
    ,["u", 0.60]
    ,["v", 0.67]
    ,["w", 0.85]
    ,["x", 0.54]
    ,["y", 0.67]
    ,["z", 0.60]
    ,["A", 0.72]
    ,["B", 0.67]
    ,["C", 0.67]
    ,["D", 0.67]
    ,["E", 0.60]
    ,["F", 0.60]
    ,["G", 0.67]
    ,["H", 0.67]
    ,["I", 0.27]
    ,["J", 0.67]
    ,["K", 0.67]
    ,["L", 0.60]
    ,["M", 0.72]
    ,["N", 0.67]
    ,["O", 0.67]
    ,["P", 0.67]
    ,["Q", 0.67]
    ,["R", 0.67]
    ,["S", 0.67]
    ,["T", 0.67]
    ,["U", 0.67]
    ,["V", 0.72]
    ,["W", 1.00]
    ,["X", 0.67]
    ,["Y", 0.72]
    ,["Z", 0.67]
    ,[" ", 0.54]
];
GVAR(CharWidths) = [GVAR(Metrics), 1] call CBA_fnc_hashCreate;

// Cache lengths
GVAR(TextLengths) = [] call CBA_fnc_hashCreate;

#ifdef CALIBRATE
if (isNil QGVAR(TEST_Index)) then
{
    GVAR(TEST_Index) = 0;
};

QFUNC(testMetrics) call FUNC(canvasAdd);
#endif
